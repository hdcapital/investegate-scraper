name: Daily Investegate Scrape

on:
  schedule:
    # GitHub uses UTC. 06:30 UTC ≈ 5:30pm Sydney during AEDT.
    # If Sydney switches to AEST (UTC+10), change this to '30 07 * * *'.
    - cron: '30 06 * * *'
  workflow_dispatch:  # lets you run it manually

jobs:
  run:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install requests beautifulsoup4 lxml python-dateutil openai

      - name: Run scraper
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}  # keep AI ON
        run: |
          python investegate_scraper.py \
            --pages 2 \
            --per_page 300 \
            --since_days 7 \
            --min_score 1 \
            --keywords_file keywords.txt \
            --use_ai true

      # Find latest out/<date>/site/index.html
      - name: Locate latest index.html
        id: find_html
        run: |
          set -e
          latest_dir="$(ls -td out/* 2>/dev/null | head -1)"
          if [ -z "$latest_dir" ] || [ ! -f "$latest_dir/site/index.html" ]; then
            echo "No index.html found under out/*/site/" >&2
            exit 1
          fi
          echo "INDEX_FILE=$latest_dir/site/index.html" >> "$GITHUB_ENV"
          echo "Latest HTML: $latest_dir/site/index.html"

      # Email with inline HTML + attach full file (Python SMTP)
      - name: Email report (inline HTML + attach full file) via Python SMTP
        env:
          SMTP_SERVER: ${{ secrets.SMTP_SERVER }}
          SMTP_PORT: ${{ secrets.SMTP_PORT }}
          SMTP_USERNAME: ${{ secrets.SMTP_USERNAME }}
          SMTP_PASSWORD: ${{ secrets.SMTP_PASSWORD }}
          TO_EMAIL: ${{ secrets.TO_EMAIL }}
          FROM_NAME: ${{ secrets.FROM_NAME }}
          GITHUB_RUN_NUMBER: ${{ github.run_number }}
          INDEX_FILE: ${{ env.INDEX_FILE }}
        run: |
          python - << 'PY'
          import os, smtplib, mimetypes
          from email.mime.multipart import MIMEMultipart
          from email.mime.text import MIMEText
          from email.mime.base import MIMEBase
          from email import encoders
          from email.utils import formataddr

          smtp_server = os.environ["SMTP_SERVER"]
          smtp_port   = int(os.environ["SMTP_PORT"])
          username    = os.environ["SMTP_USERNAME"]
          password    = os.environ["SMTP_PASSWORD"]
          to_email    = os.environ["TO_EMAIL"]
          from_name   = os.environ.get("FROM_NAME","HD Capital")
          run_num     = os.environ.get("GITHUB_RUN_NUMBER","?")
          index_path  = os.environ["INDEX_FILE"]

          # Read the full HTML
          with open(index_path, "r", encoding="utf-8", errors="ignore") as f:
            html_body = f.read()

          # Build MIME message
          msg = MIMEMultipart("mixed")
          msg["Subject"] = f"Investegate RNS Digest – run #{run_num}"
          msg["From"]    = formataddr((from_name, username))
          msg["To"]      = to_email

          # Inline HTML body
          alt = MIMEMultipart("alternative")
          alt.attach(MIMEText(html_body, "html", "utf-8"))
          msg.attach(alt)

          # Attach the full HTML file
          ctype, _ = mimetypes.guess_type(index_path)
          if ctype is None:
              ctype = "application/octet-stream"
          maintype, subtype = ctype.split("/", 1)
          with open(index_path, "rb") as f:
              part = MIMEBase(maintype, subtype)
              part.set_payload(f.read())
          encoders.encode_base64(part)
          part.add_header("Content-Disposition", "attachment", filename="index.html")
          msg.attach(part)

          # Send via SMTP (STARTTLS on 587)
          with smtplib.SMTP(smtp_server, smtp_port) as server:
              server.ehlo()
              try:
                  server.starttls()
                  server.ehlo()
              except smtplib.SMTPException:
                  pass  # if TLS already enforced
              server.login(username, password)
              server.sendmail(username, [to_email], msg.as_string())
          print("Email sent.")
          PY

      # Keep artifact upload for backup/downloads
      - name: Upload output
        uses: actions/upload-artifact@v4
        with:
          name: investegate-out
          path: out/
